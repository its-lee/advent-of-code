import { promises as fs } from 'fs';

import { fileExists, copyDir, listDir } from './helpers/files.js';
import { runDays } from './runner/runner.js';

const parseNumericParameter = value => {
  const parsed = parseInt(value);
  if (isNaN(parsed)) {
    throw new Error(`A numeric parameter is required - received ${value}`);
  }

  return parsed;
};

const parseSourceParameter = source => {
  const sources = {
    i: 'input',
    d: 'demo'
  };

  if (!(source in sources)) {
    const valid = Object.keys(sources).join(', ');
    throw new Error(`A valid source parameter is required (one of ${valid}) - received ${source}`);
  }

  return sources[source];
};

const handleDayCommand = async ([year, day, source = 'i']) => {
  const yearFilter = parseNumericParameter(year);
  const dayFilter = parseNumericParameter(day);
  source = parseSourceParameter(source);

  await runDays({ yearFilter, dayFilter, logOutput: true, source });
};

const handleTestCommand = async () => {
  await runDays({ logOutput: false });
};

const regenerateDaysIndex = async () => {
  const days = (await listDir('src/days', 2))
    // Ensure that we use a sorted array we're working from so that the output file is predictable,
    // and reduces the number of changes we need to make to the file.
    .sort((a, b) => a - b)
    .reduce((acc, dir) => {
      dir = dir.split('/').slice(2).join('/');
      acc.push({ variable: `index${dir.replace('/', '')}`, dir });
      return acc;
    }, []);

  const lines = [
    `// This file is auto-generated by the 'new' command - do not edit this by hand!`,
    ...days.map(
      ({ variable, dir }) => `import { default as ${variable} } from './${dir}/index.js';`
    ),
    '',
    'const days = {',
    days.map(({ variable, dir }) => `  '${dir}': ${variable}`).join(',\n'),
    '};',
    '',
    `export default days;`,
    ''
  ];

  await fs.writeFile('src/days/index.js', lines.join('\n'), { flag: 'w' });
};

const handleNewCommand = async ([year, day]) => {
  year = parseNumericParameter(year);
  day = parseNumericParameter(day);

  const dest = `src/days/${year}/${day}`;
  if (await fileExists(dest)) {
    throw new Error(`${dest} already exists.`);
  }

  await copyDir(`src/template`, dest);

  await regenerateDaysIndex();

  console.log(`Created new folder ${dest} and added to index`);
};

export default {
  day: handleDayCommand,
  test: handleTestCommand,
  new: handleNewCommand
};
